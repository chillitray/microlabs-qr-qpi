// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230523151712_FourMigration")]
    partial class FourMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.CounterfietManagement", b =>
                {
                    b.Property<Guid>("counterfeit_mgmt_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("counterfeit_type")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<int>("high_risk_threshold")
                        .HasColumnType("int");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("low_risk_threshold")
                        .HasColumnType("int");

                    b.Property<int>("moderate_threshold")
                        .HasColumnType("int");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.HasKey("counterfeit_mgmt_id");

                    b.ToTable("CounterfietManagement");
                });

            modelBuilder.Entity("Domain.Notification", b =>
                {
                    b.Property<Guid>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("notification_content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("notification_type")
                        .HasColumnType("char(36)");

                    b.Property<string>("redirect_url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("notification_id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Domain.NotificationActivity", b =>
                {
                    b.Property<Guid>("notification_activity_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("first_read_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("notification_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("read_count")
                        .HasColumnType("int");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("notification_activity_id");

                    b.ToTable("NotificationActivity");
                });

            modelBuilder.Entity("Domain.NotificationTypeManagement", b =>
                {
                    b.Property<Guid>("notification_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("notification_for")
                        .HasColumnType("longtext");

                    b.Property<string>("notifiication_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("notification_type_id");

                    b.ToTable("NotificationTypeManagement");
                });

            modelBuilder.Entity("Domain.Plant", b =>
                {
                    b.Property<Guid>("plant_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("founded_on")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("operated_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("plant_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_location_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_location_city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_location_country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_location_geo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_location_pincode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_location_state")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("plant_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("plant_qr_limit")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("plant_id");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("Domain.PlantKeyManagement", b =>
                {
                    b.Property<Guid>("plant_key_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("plant_key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("plant_key_id");

                    b.ToTable("PlantKeyManagement");
                });

            modelBuilder.Entity("Domain.PlantSessionManagement", b =>
                {
                    b.Property<Guid>("plant_session_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("expired_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_access")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("last_access_ip")
                        .HasColumnType("longtext");

                    b.Property<string>("plant_access_token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("plant_key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("plant_session_id");

                    b.ToTable("PlantSessionManagement");
                });

            modelBuilder.Entity("Domain.ProductManagement", b =>
                {
                    b.Property<Guid>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("product_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("product_expiry_days")
                        .HasColumnType("int");

                    b.Property<string>("product_logo")
                        .HasColumnType("longtext");

                    b.Property<int>("product_mrp")
                        .HasColumnType("int");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("product_writeup")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("product_id");

                    b.ToTable("ProductManagement");
                });

            modelBuilder.Entity("Domain.ProductMedia", b =>
                {
                    b.Property<Guid>("product_media_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("media_type")
                        .HasColumnType("int");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("product_media_id");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Domain.ProductPlantMapping", b =>
                {
                    b.Property<Guid>("product_plant_mapping_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("product_plant_mapping_id");

                    b.ToTable("ProductPlantMapping");
                });

            modelBuilder.Entity("Domain.QrManagement", b =>
                {
                    b.Property<Guid>("qr_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("batch_no")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("created_at_ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("expiry_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("manufactured_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("pack_id")
                        .HasColumnType("longtext");

                    b.Property<Guid>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<int?>("product_mrp_copy")
                        .HasColumnType("int");

                    b.Property<string>("public_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("serial_number")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("char(36)");

                    b.HasKey("qr_id");

                    b.ToTable("QrManagement");
                });

            modelBuilder.Entity("Domain.QrReadActivity", b =>
                {
                    b.Property<Guid>("qr_read_activity_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("qr_id")
                        .HasColumnType("char(36)");

                    b.HasKey("qr_read_activity_id");

                    b.ToTable("QrReadActivity");
                });

            modelBuilder.Entity("Domain.RangeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("last_used_value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RangeTable");
                });

            modelBuilder.Entity("Domain.RateLimits", b =>
                {
                    b.Property<Guid>("rate_limit_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("max_allowed_overall")
                        .HasColumnType("int");

                    b.Property<int>("max_allowed_per_day")
                        .HasColumnType("int");

                    b.Property<int>("rate_type")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("rate_limit_id");

                    b.ToTable("RateLimits");
                });

            modelBuilder.Entity("Domain.RequestProductAccess", b =>
                {
                    b.Property<Guid>("request_product_access_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("message")
                        .HasColumnType("longtext");

                    b.Property<Guid>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("requested_by_user_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("requested_qr_limit")
                        .HasColumnType("int");

                    b.Property<Guid>("responded_by_user_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("request_product_access_id");

                    b.ToTable("RequestProductAccess");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<Guid>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("access_level")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("role_id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Domain.SessionActivity", b =>
                {
                    b.Property<Guid>("session_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("last_access")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("last_access_ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("last_login")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("last_login_ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("user_access_token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("session_id");

                    b.ToTable("SessionActivity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SessionActivity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.SmtpConfig", b =>
                {
                    b.Property<Guid>("smtp_config_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<string>("email_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("email_type")
                        .HasColumnType("int");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("max_emails_per_day")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("smtp_config_id");

                    b.ToTable("SmtpConfig");
                });

            modelBuilder.Entity("Domain.TrackerEmail", b =>
                {
                    b.Property<Guid>("tracker_email_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email_body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email_subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("reason")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracker_email_id");

                    b.ToTable("TrackerEmail");
                });

            modelBuilder.Entity("Domain.TrackerOtp", b =>
                {
                    b.Property<Guid>("tracker_otp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<int>("failed_attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("last_attempted_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("reason")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracker_otp_id");

                    b.ToTable("TrackerOtp");
                });

            modelBuilder.Entity("Domain.TrackingActivity", b =>
                {
                    b.Property<Guid>("tracking_activity_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("custom_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("severity_type")
                        .HasColumnType("int");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_activity_id");

                    b.ToTable("TrackingActivity");
                });

            modelBuilder.Entity("Domain.TrackingApi", b =>
                {
                    b.Property<Guid>("tracking_api_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip_address")
                        .HasColumnType("longtext");

                    b.Property<string>("req_endpoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("req_headers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("req_method")
                        .HasColumnType("int");

                    b.Property<string>("request_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("request_type")
                        .HasColumnType("int");

                    b.Property<string>("response_obj")
                        .HasColumnType("longtext");

                    b.Property<string>("unique_id")
                        .HasColumnType("longtext");

                    b.HasKey("tracking_api_id");

                    b.ToTable("TrackingApi");
                });

            modelBuilder.Entity("Domain.TrackingCounterfeitManagement", b =>
                {
                    b.Property<Guid>("tracking_counterfeit_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("counterfeit_mgmt_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_counterfeit_id");

                    b.ToTable("TrackingCounterfeitManagement");
                });

            modelBuilder.Entity("Domain.TrackingEditSmtpConfig", b =>
                {
                    b.Property<Guid>("tracking_edit_smtp_config_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("smtp_config_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_edit_smtp_config_id");

                    b.ToTable("TrackingEditSmtpConfig");
                });

            modelBuilder.Entity("Domain.TrackingNotification", b =>
                {
                    b.Property<Guid>("tracking_notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("notification_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_notification_id");

                    b.ToTable("TrackingNotification");
                });

            modelBuilder.Entity("Domain.TrackingNotificationManagement", b =>
                {
                    b.Property<Guid>("tracking_notification_mgmt_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("notification_type_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_notification_mgmt_id");

                    b.ToTable("TrackingNotificationManagement");
                });

            modelBuilder.Entity("Domain.TrackingPlantActivity", b =>
                {
                    b.Property<Guid>("tracking_plant_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_plant_id");

                    b.ToTable("TrackingPlantActivity");
                });

            modelBuilder.Entity("Domain.TrackingPlantKeyManagement", b =>
                {
                    b.Property<Guid>("tracking_plant_key_mgmt_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("plant_key_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_plant_key_mgmt_id");

                    b.ToTable("TrackingPlantKeyManagement");
                });

            modelBuilder.Entity("Domain.TrackingProductActivity", b =>
                {
                    b.Property<Guid>("tracking_product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_product_id");

                    b.ToTable("TrackingProductActivity");
                });

            modelBuilder.Entity("Domain.TrackingProductMediaActivity", b =>
                {
                    b.Property<Guid>("tracking_product_media_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("product_media_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_product_media_id");

                    b.ToTable("TrackingProductMediaActivity");
                });

            modelBuilder.Entity("Domain.TrackingProductPlantMapActivity", b =>
                {
                    b.Property<Guid>("tracking_product_plant_map_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("product_plant_mapping_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_product_plant_map_id");

                    b.ToTable("TrackingProductPlantMapActivity");
                });

            modelBuilder.Entity("Domain.TrackingQrManagement", b =>
                {
                    b.Property<Guid>("tracking_qr_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("qr_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_qr_id");

                    b.ToTable("TrackingQrManagement");
                });

            modelBuilder.Entity("Domain.TrackingRateLimit", b =>
                {
                    b.Property<Guid>("tracking_rate_limit_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("current_count")
                        .HasColumnType("int");

                    b.Property<string>("request_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("request_type")
                        .HasColumnType("int");

                    b.Property<string>("response_obj")
                        .HasColumnType("longtext");

                    b.Property<string>("unique_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("tracking_rate_limit_id");

                    b.ToTable("TrackingRateLimit");
                });

            modelBuilder.Entity("Domain.TrackingUserEditActivity", b =>
                {
                    b.Property<Guid>("tracking_user_edit_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("new_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_obj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("tracking_user_edit_id");

                    b.ToTable("TrackingUserEditActivity");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("char(36)");

                    b.Property<string>("emp_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("full_name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("joined_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("last_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("plant_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("role_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.UserInformation", b =>
                {
                    b.Property<Guid>("user_information_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("country_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("location_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("location_city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("location_country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("location_pincode")
                        .HasColumnType("longtext");

                    b.Property<string>("location_state")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone_no")
                        .HasColumnType("longtext");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("qr_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("qr_read_activity_id")
                        .HasColumnType("char(36)");

                    b.HasKey("user_information_id");

                    b.ToTable("UserInformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.InactiveSessionActivity", b =>
                {
                    b.HasBaseType("Domain.SessionActivity");

                    b.Property<DateTime>("expired_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("InactiveSessionActivity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
